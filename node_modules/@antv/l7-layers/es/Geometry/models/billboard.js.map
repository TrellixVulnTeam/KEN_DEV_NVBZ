{"version":3,"sources":["../../../src/Geometry/models/billboard.ts"],"names":["AttributeType","gl","getMask","BaseModel","BillBoardModel","layer","getLayerConfig","center","size","indices","vertices","opacity","width","height","raisingHeight","rotateFlag","mapService","version","radian","Math","PI","getRotation","u_raisingHeight","Number","u_RotateMatrix","Float32Array","cos","sin","u_opacity","u_texture","texture","u_size","terrainImage","destroy","mask","maskInside","mapTexture","drawCanvas","createTexture2D","rendererService","updateTexture","buildLayerModel","moduleName","vertexShader","planeVert","fragmentShader","planeFrag","triangulation","planeGeometryTriangulation","primitive","TRIANGLES","depth","enable","blend","getBlend","stencil","initModels","canvasWidth","canvasHeight","canvas","document","createElement","ctx","getContext","data","wrapS","CLAMP_TO_EDGE","wrapT","layerService","updateLayerRenderList","renderLayers","properties","type","minimum","maximum","styleAttributeService","registerStyleAttribute","name","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","FLOAT","update","feature","featureIdx","vertex","attributeIdx","extrude","extrudeIndex"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IAttrubuteAndElements,\n  IEncodeFeature,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport { getMask, isMini } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { IGeometryLayerStyleOptions } from '../../core/interface';\nimport planeFrag from '../shaders/billboard_frag.glsl';\nimport planeVert from '../shaders/billboard_vert.glsl';\n\nexport default class BillBoardModel extends BaseModel {\n  protected texture: ITexture2D;\n  protected terrainImage: HTMLImageElement;\n  protected terrainImageLoaded: boolean = false;\n  protected mapTexture: string | undefined;\n  private radian: number = 0; // 旋转的弧度\n\n  public planeGeometryTriangulation = () => {\n    const {\n      center = [120, 30],\n    } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n    return {\n      size: 4,\n      indices: [0, 1, 2, 2, 3, 0],\n      vertices: [\n        ...center,\n        ...[1, 1],\n        ...center,\n        ...[0, 1],\n        ...center,\n        ...[0, 0],\n        ...center,\n        ...[1, 0],\n      ],\n    };\n  };\n\n  public getUninforms(): IModelUniform {\n    const {\n      opacity,\n      width = 1,\n      height = 1,\n      raisingHeight = 0,\n    } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n\n    /**\n     *               rotateFlag\n     * L7MAP            1\n     * MAPBOX           1\n     * GAODE2.x         -1\n     * GAODE1.x         -1\n     */\n    let rotateFlag = 1;\n    if (\n      this.mapService.version === 'GAODE2.x' ||\n      this.mapService.version === 'GAODE1.x'\n    ) {\n      rotateFlag = -1;\n    }\n    // 控制图标的旋转角度（绕 Z 轴旋转）\n    this.radian =\n      (rotateFlag * Math.PI * (this.mapService.getRotation() % 360)) / 180;\n\n    return {\n      u_raisingHeight: Number(raisingHeight),\n      u_RotateMatrix: new Float32Array([\n        // z\n        Math.cos(this.radian),\n        Math.sin(this.radian),\n        -Math.sin(this.radian),\n        Math.cos(this.radian),\n      ]),\n      u_opacity: opacity || 1,\n      u_texture: this.texture,\n      u_size: [width, height],\n    };\n  }\n\n  public clearModels(): void {\n    // @ts-ignore\n    this.terrainImage = null;\n    this.texture?.destroy();\n  }\n\n  public initModels() {\n    const {\n      mask = false,\n      maskInside = true,\n      mapTexture,\n      drawCanvas,\n    } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n    this.mapTexture = mapTexture;\n\n    const { createTexture2D } = this.rendererService;\n    this.texture = createTexture2D({\n      height: 0,\n      width: 0,\n    });\n\n    if (drawCanvas) {\n      this.updateTexture(drawCanvas);\n    }\n\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'geometry_billboard',\n        vertexShader: planeVert,\n        fragmentShader: planeFrag,\n        triangulation: this.planeGeometryTriangulation,\n        primitive: gl.TRIANGLES,\n        // primitive: gl.LINES,\n        depth: { enable: true },\n        blend: this.getBlend(),\n        stencil: getMask(mask, maskInside),\n      }),\n    ];\n  }\n\n  public buildModels() {\n    return this.initModels();\n  }\n\n  public updateTexture(drawCanvas: (canvas: HTMLCanvasElement) => void): void {\n    const { createTexture2D } = this.rendererService;\n\n    const {\n      canvasWidth = 1,\n      canvasHeight = 1,\n    } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n    const canvas = document.createElement('canvas');\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      drawCanvas(canvas);\n      this.texture = createTexture2D({\n        data: canvas,\n        width: canvas.width,\n        height: canvas.height,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      });\n      this.layerService.updateLayerRenderList();\n      this.layerService.renderLayers();\n    }\n  }\n\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n\n  protected registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'extrude',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Extrude',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const extrude = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0];\n          const extrudeIndex = (attributeIdx % 4) * 3;\n          return [\n            extrude[extrudeIndex],\n            extrude[extrudeIndex + 1],\n            extrude[extrudeIndex + 2],\n          ];\n        },\n      },\n    });\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[2], vertex[3]];\n        },\n      },\n    });\n  }\n}\n"],"file":"billboard.js"}